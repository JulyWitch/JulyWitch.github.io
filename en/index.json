[{"content":"In the early days of my career, I was tasked with building a simple social media mobile app. I developed the application to MVP version, and along the way, I refactored every single thing with the intention of acheiveing \u0026ldquo;clean code\u0026rdquo;. I was obsessed with DRY principle and created countless reusable code blocks, all to avoid rewriting the same code.\nBut I\u0026rsquo;d already made my first mistake\nToo much refactoring doesn\u0026rsquo;t make the code cleaner, It just makes it harder, hard to navigate, hard to change and hard to understand.\nThe Consequences A few weeks later, the consequences hit hard. A tester reported a bug in phone number input of login page, I was confident in my \u0026ldquo;clean\u0026rdquo; codebase, I jumped in, fixed the bug in my reusable PhoneNumberInput component, tested the login page, and pushed the update.\nBut then the chaos began,\nI was using PhoneNumberInput on both login page and profile page, Fixing the bug in login page triggered a domino effect and introduced a new bug in profile page.\nFunny how it gets you into an infinite loop of debugging and fixing. The tasks that were meant to take half an hour now take a full day.\nThe actual problem wasn’t how I wrote the PhoneNumberInput or how I abstracted it. The problem was its very existence.\nThe Reality of Abstractions At the start of a product, everything is easy, and Our abstractions seem logical and elegant. Everything Makes Sense.\nBut as the business grows, things change.\nPM, testers, and client feedback start shaping the product, pushing it beyond the limits you unintentionally set with your refactoring.\nThe Illusional Feeling Refactoring feels good, Over-Refactoring feels even better, In those days, I kept telling myself \u0026ldquo;Oh, I\u0026rsquo;m improving the Code\u0026rdquo;, but each bug, each edge case, and each feedback was ruining my abstractions and making the underlying code complex.\nThe other problem is onboarding new members, When using the known components and refactoring wisely, new members can join the team and start working quickly, but with over-refactored components, They face a steep learning curve.\nWrapping It Up Hard truths I learned:\nAbstraction you make are perfect at the start but will be complex as the product grows Over-Refactoring causes domino effect and leads to unintended bugs The onboarding of new team members takes longer when code is over-refactored The development speed decreases, While you might avoid duplicating code, you still need to check multiple functionalities when you make a simple change in one. Too much refactoring doesn\u0026rsquo;t make the code cleaner, It just makes it \u0026ldquo;look\u0026rdquo; clean Surface Beauty, But Hidden Chaos.\nWhere to refactor My rules for refactoring are pretty simple\nThe code block is duplicated +3 times The code block and what it does is atomic enough and does a well defined task When to stop \u0026ldquo;Oh I\u0026rsquo;m improving the Code\u0026rdquo;: Refactoring makes us developers feel productive, Now your duty is to find out if this refactoring is gonna add user value or is it just the \u0026ldquo;Programmer Ego\u0026rdquo; telling you to do this. The lazy programmer mindset: Refactoring 3 blocks of code takes more time than changing them one by one, So why even bother? Adding more params: If you find yourself adding new params to your already refactored code block, It\u0026rsquo;s time to rethink your approach What’s your experience with over-refactoring? Have you ever encountered a codebase like this?\n","permalink":"https://sajadabdollahi.ir/en/posts/over-refactoring-effects/","summary":"\u003cp\u003eIn the early days of my career, I was tasked with building a simple social media mobile app.\nI developed the application to MVP version, and along the way, I refactored every single thing with the intention\nof acheiveing \u0026ldquo;clean code\u0026rdquo;.\nI was obsessed with DRY principle and created countless reusable code blocks, all to avoid rewriting the same code.\u003c/p\u003e\n\u003cp\u003eBut I\u0026rsquo;d already made my first mistake\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eToo much refactoring doesn\u0026rsquo;t make the code cleaner, It just makes it harder, hard to navigate, hard to change and hard to understand.\u003c/p\u003e","title":"The Over-Refactoring Trap, A Guide On Where To Refactor And When To Stop"},{"content":"Six months ago, I made a decision that felt borderline reckless: I uninstalled VS Code, my trusty code companion for five years, and switched to Neovim. In other words I did rm -rf vscode; nvim .\nI\u0026rsquo;m a full time SWE working on projects with different languages and setups, So this was not just a casual experiment, It was a hard pivot that suddenly reduced my productivity. I spent weekends and after-work time to tweak configs, Figuring out Lua syntax and muttering curses LSPs. I tried and I could adopt with it, It taught me great lessons about coding efficiency, tooling, project structure, file browsing and many more.\nHere is why I don\u0026rsquo;t regret it and what I wish I\u0026rsquo;d known sooner.\nFirst Month: “What Have I Done?” TBH My first week felt like learning to code all over again.\nLua I’d never written a line of Lua. Suddenly, I was knee deep in init.lua, figuring out with plugin managers (Lazy.nvim, I love you now) and debugging cryptic errors. Keybindings: It was pretty hard to remember keybinding and using them in my muscle memory, I had to always write them down on a paper to remember them. Don\u0026rsquo;t ask me about switching from CMD+S to :wq , It was really hard. The other problem was copy pasting, You basically cannot copy paste into and out of Neovim without selecting the correct register and it takes time to take place in muscle memory. Goodbye dear plugins: I replaced VS Code’s luxuries ESLint, Prettier, IntelliSense with nvim-lsp, treesitter, and mason. My productivity reduced. I worked slower and I was figuring out the tool instead of the problem. But I refused to revert it, because something kept nagging me: What if this pain is teaching me more than comfort ever did?\nThe Turning Point: “Oh. This Is Why People Do This.” Around month two, things clicked. Neovim stopped fighting me and I was starting to enjoy it.\nSpeed Is a Feature: No more mouse. I could simply navigate between files with Telescope, jump between splits with Ctrl+hjkl, and bulk change code with %s substitution. Understanding the Machine: Configuring my own LSP setup for TypeScript and other langs gave me a good grasp of how these things work out of the box. I finally grasped how linting, formatting, and autocompletion actually work under the hood, knowledge that’s made me a better debugger. Minimal and simplictiy: Modern IDEs bombard you with features. Neovim forced me to ask: What do I truly need?, I could add only things I need and keep my focus on the code instead of thousands of icons, Texts and notifications. What Neovim Taught Me About Coding Beyond the editor wars, this experiment reshaped how I approach coding work:\nModern tools prioritize user-friendliness over customization options. Neovim taught me to tailor workflows to my needs—not the other way around. Using CLI tools like git and npm directly within Neovim\u0026rsquo;s terminal enhanced my workflow. I now write bash scripts for repetitive tasks instead of relying on GUI buttons. Minimalism Scales: A lightweight editor forces you to write cleaner code by removing all the distractions. I can now think harder about naming, structure, and patterns. My components got smaller, my state logic more efficient, and my reliance on frameworks and libraries more mindful. Is Neovim the right editor for you? Neovim might not be for everyone. If you’re on a tight deadline or value simplicity, stick with VS Code. Want to understand your tools better and regain control of your craft? Give it a shot.\nYes, the learning curve is brutal. Don\u0026rsquo;t be surprised if you want to quit. But surviving that gauntlet will make you a sharper, more resourceful developer.\nSix months later, I’m coding faster, thinking deeper, and ironically appreciating modern IDEs more. Because now, I choose my tools. They don’t choose me.\nNeovim\u0026rsquo;s interface felt like a step back from the ease of a self-driving car. Driving a manual transmission taught me more about coding than any IDE ever did.\n","permalink":"https://sajadabdollahi.ir/en/posts/neovim-experience/","summary":"\u003cp\u003eSix months ago, I made a decision that felt borderline reckless: I uninstalled VS Code, my trusty code companion for five years, and switched to Neovim. In other words I did \u003ccode\u003erm -rf vscode; nvim .\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eI\u0026rsquo;m a full time SWE working on projects with different languages and setups, So this was not just a casual experiment, It was a hard pivot that suddenly reduced my productivity. I spent weekends and after-work time to tweak configs, Figuring out Lua syntax and muttering curses LSPs. I tried and I could adopt with it, It taught me great lessons about coding efficiency, tooling, project structure, file browsing and many more.\u003c/p\u003e","title":"Why I Ditched Modern IDEs for Neovim (And What It Taught Me About Coding)"}]